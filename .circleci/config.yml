version: 2.1

orbs:
  slack: circleci/slack@4.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm "s3://udapeople-${CIRCLE_WORKFLOW_ID}" --recursive
            aws cloudformation delete-stack --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID}"
            aws cloudformation delete-stack --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID}"
            curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID}" --request PUT --data "" https://api.memstash.io/values/url_${CIRCLE_WORKFLOW_ID}
            curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID}" --request PUT --data "" https://api.memstash.io/values/arn_${CIRCLE_WORKFLOW_ID}


  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID})
            if (( $SUCCESS == 1 ));
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      # - slack/notify:
      #     event: fail
      #     template: basic_fail_1

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      # - slack/notify:
      #     event: fail
      #     template: basic_fail_1

  test-frontend:
    docker:
      - image: 'circleci/node:13.8.0'
    steps:
      - checkout
      - run:
          name: Test frontend
          command: |
            cd frontend
            npm install
            npm run test
      # - slack/notify:
      #     event: fail
      #     template: basic_fail_1

  test-backend:
    docker:
      - image: 'circleci/node:13.8.0'
    steps:
      - checkout
      - run:
          name: Test backend
          command: |
            cd backend
            npm install
            npm run test
      # - slack/notify:
      #     event: fail
      #     template: basic_fail_1

  scan-frontend:
    docker:
      - image: 'circleci/node:13.8.0'
    steps:
      - checkout
      - run:
          name: Scan frontend
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
      # - slack/notify:
      #     event: fail
      #     template: basic_fail_1

  scan-backend:
    docker:
      - image: 'circleci/node:13.8.0'
    steps:
      - checkout
      - run:
          name: Scan backend
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
      # - slack/notify:
      #     event: fail
      #     template: basic_fail_1

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            pwd
            ls -la
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID}" \
              --tags project=udapeople \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"
            PUBLICDNS=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID}" --output text)
            echo ${PUBLICDNS}
            echo ${CIRCLE_WORKFLOW_ID}
            curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID}" --request PUT --data ${PUBLICDNS} https://api.memstash.io/values/public_dns
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            pwd
            ls -la
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID}" \
              --tags project=udapeople \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID}" \
              --output text >> .circleci/ansible/inventory.txt
              yum -y install tar gzip jq npm
              cat ".circleci/ansible/inventory.txt"
      - persist_to_workspace:
          root: .
          paths:
            - .circleci/ansible
      - destroy-environment

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["c8:81:4b:0a:4c:34:d3:35:2f:ad:2a:6e:66:e6:2f:0e"]
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            pip install awscli
      - run:
          name: Create dotenv file
          command: |
            cd backend/
            echo > ".env"
            echo ENVIRONMENT="production" >> ".env"
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> ".env"
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> ".env"
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> ".env"
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> ".env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> ".env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> ".env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ".env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ".env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ".env"
      - run:
          name: Configure server
          command: |
            cat ".circleci/ansible/inventory.txt"
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
      - destroy-environment

  # run-migrations:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - run:
  #         name: run db migration
  #         command: |
  #           cd backend
  #           echo ENVIROMENT=$ENVIROMENT > ".env"
  #           echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> ".env"
  #           echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> ".env"
  #           echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> ".env"
  #           echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> ".env"
  #           echo TYPEORM_HOST=$TYPEORM_HOST >> ".env"
  #           echo TYPEORM_PORT=$TYPEORM_PORT >> ".env"
  #           echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ".env"
  #           echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ".env"
  #           echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ".env"
  #           npm install
  #           touch migrations_log.txt
  #           npm run migrations >> migrations_log.txt
  #           cat migrations_log.txt
  #     - run:
  #         name: Send migration results to memstash
  #         command: |
  #           cd backend/
  #           cat result.txt
  #           RESULT=$(grep -Fc "has been executed successfully" result.txt)
  #           curl -H "Content-Type: text/plain" -H "token: migration-${CIRCLE_WORKFLOW_ID}" --request PUT --data ${RESULT} https://api.memstash.io/values/migration_result
      # - revert-migrations
      # - destroy-environment

  # run-migrations:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           sudo apt-get -y -qq update
  #           sudo apt-get -y -qq install awscli
  #     - run:
  #         name: Run migrations
  #         command: |
  #           cd backend
  #           npm i
  #           npm run migrations:revert
  #           npm run migrations >> output.txt
      # - run:
      #     name: Send migration results to memstash
      #     command: |
      #       cd backend
      #       cat output.txt
      #       if cat output.txt | grep -q "has been executed sucessfully"; then
      #           curl -H "Content-Type: text/plain" -H \
      #           "token: 68de42c9-7df8-430d-b8b7-60e78adeb091" \
      #           --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
      #       fi

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Run migrations
          no_output_timeout: 10m
          command: |
            cd backend
            echo ENVIROMENT=$ENVIROMENT > ".env"
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> ".env"
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> ".env"
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> ".env"
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> ".env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> ".env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> ".env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ".env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ".env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ".env"
            npm install
            touch migrations_log.txt
            npm run migrations >> migrations_log.txt
            cat migrations_log.txt

  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y gcc-c++ make
            curl -fsSL https://rpm.nodesource.com/setup_lts.x | bash -
            yum install -y nodejs
            node -v
            npm -v
      - run:
          name: Get backend url
          command: |
            # your code here
            cd frontend/
            BACKENDIP=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/public_dns)
            echo API_URL="http://${BACKENDIP}:3030" > ".env"
            cat .env
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
            cd frontend
            npm i
            npm run build
            aws s3 sync ./dist s3://"udapeople-${CIRCLE_WORKFLOW_ID}"
      # Here's where you will add some code to rollback on failure
      - revert-migrations
      - destroy-environment

  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: [9d:77:a5:ae:4c:ef:5c:fd:16:cf:e7:01:39:5e:ee:a1:00:d2:be:d3]
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            apk add --update npm
            apk add --update curl
            pip3 --no-cache-dir install awscli
      - run:
          name: Build Backend
          command: |
            cd backend
            npm i
            npm run build
      - run:
          name: "tar archiv"
          command: |
            tar -cf backend.tar ./backend
      - run:
          name: Deploy backend
          command: |
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/deploy-backend.yml
      - revert-migrations
      - destroy-environment

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --update curl
            apk add --update npm
            pip3 --no-cache-dir install awscli
      - run:
          name: Backend Smoke Test.
          command: |
            # your code here
            echo ${CIRCLE_WORKFLOW_ID}
            BACKENDIP=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/public_dns)
            STATUSAPI="https://${BACKENDIP}:3030/api/status"
            if curl -s --head ${STATUSAPI}
            then
              echo "OK"
            else
              echo "Fail"
            fi
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID}.s3-website-us-west-2.amazonaws.com"
            if ( curl -s ${URL} | grep "Welcome" )
            then
              return 0
            else
              return 1
            fi
      - destroy-environment
      - revert-migrations

  cloudfront-update:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y gcc-c++ make
            curl -fsSL https://rpm.nodesource.com/setup_lts.x | bash -
            yum install -y nodejs
            node -v
            npm -v
            yum -y install tar gzip jq
      - run:
          name: Update cloudfront distribution
          command: |
            export OldWorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)

            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text))

            echo Old Worflow Id: "${OldWorkflowID}"

            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name "udapeople-cloudfront-${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID}" \
              --tags project=udapeople &

            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              aws s3 rm "s3://udapeople-${CIRCLE_WORKFLOW_ID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
            fi
      - destroy-environment
      - revert-migrations

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Get old stack workflow id
          command: |
            export OldWorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
            export STACKS=$(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text)

            echo Old Worflow Id: "${OldWorkflowID}"

      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              aws s3 rm s3://udapeople-${OldWorkflowID} --recursive
              aws cloudformation delete-stack --stack-name udapeople-backend-${OldWorkflowID}
              aws cloudformation delete-stack --stack-name udapeople-frontend-${OldWorkflowID}
            fi

# workflows:
#   default:
#     jobs:
#       # - build-frontend:
#       #     context:
#       #       - Slack
#       # - build-backend:
#       #     context:
#       #       - Slack
#       # - test-frontend:
#       #     context:
#       #       - Slack
#       #     requires: [build-frontend]
#       # - test-backend:
#       #     context:
#       #       - Slack
#       #     requires: [build-backend]
#       # - scan-backend:
#       #     context:
#       #       - Slack
#       #     requires: [build-backend]
#       # - scan-frontend:
#       #     context:
#       #       - Slack
#       #     requires: [build-frontend]
#       - deploy-infrastructure:
#           # requires: [test-frontend, test-backend, scan-frontend, scan-backend]
#           filters:
#             branches:
#               only: [main]
#       - configure-infrastructure:
#           requires: [deploy-infrastructure]
#           filters:
#             branches:
#               only: [main]
#       # - run-migrations:
#       #     requires: [configure-infrastructure]
#       #     filters:
#       #       branches:
#       #         only: [test]
#       - deploy-frontend:
#           # requires: [run-migrations]
#           requires: [configure-infrastructure]
#           filters:
#             branches:
#               only: [main]
#       - deploy-backend:
#           # requires: [run-migrations]
#           requires: [configure-infrastructure]
#           filters:
#             branches:
#               only: [main]
#       - smoke-test:
#           requires: [deploy-backend, deploy-frontend]
#           filters:
#             branches:
#               only: [main]
#       - cloudfront-update:
#           requires: [smoke-test]
#           filters:
#             branches:
#               only: [main]
      # - cleanup:
      #     requires: [cloudfront-update]

workflows:
  default:
    jobs:
      # - build-frontend
      # - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      - deploy-infrastructure:
          # requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [main]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
          filters:
            branches:
              only: [main]
      - run-migrations:
          requires: [configure-infrastructure]
          filters:
            branches:
              only: [main]
      - deploy-frontend:
          # requires: [run-migrations]
          requires: [configure-infrastructure]
          filters:
            branches:
              only: [main]
      - deploy-backend:
          # requires: [run-migrations]
          requires: [configure-infrastructure]
          filters:
            branches:
              only: [main]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
          filters:
            branches:
              only: [main]
      - cloudfront-update:
          requires: [smoke-test]
          filters:
            branches:
              only: [main]
      - cleanup:
          requires: [cloudfront-update]
          filters:
            branches:
              only: [main]