version: 2.1

orbs:
  slack: circleci/slack@4.1

jobs:
  # build-frontend:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys: [frontend-build]
  #     - run:
  #         name: Build front-end
  #         command: |
  #           cd frontend
  #           npm install
  #           npm run build
  #     - save_cache:
  #         paths: [frontend/node_modules]
  #         key: frontend-build
  #     - slack/notify:
  #         event: fail
  #         template: basic_fail_1

  # build-backend:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys: [backend-build]
  #     - run:
  #         name: Back-end build
  #         command: |
  #            cd backend
  #            npm install
  #            npm run build
  #     - save_cache:
  #         paths: [backend/node_modules]
  #         key: backend-build
  #     - slack/notify:
  #         event: fail
  #         template: basic_fail_1


  # test-frontend:
  #   docker:
  #     - image: 'circleci/node:13.8.0'
  #   steps:
  #     - checkout
  #     - run:
  #         name: Test frontend
  #         command: |
  #           cd frontend
  #           npm install
  #           npm run test
  #     - slack/notify:
  #         event: fail
  #         template: basic_fail_1

  # test-backend:
  #   docker:
  #     - image: 'circleci/node:13.8.0'
  #   steps:
  #     - checkout
  #     - run:
  #         name: Test backend
  #         command: |
  #           cd backend
  #           npm install
  #           npm run test
  #     - slack/notify:
  #         event: fail
  #         template: basic_fail_1


  # scan-frontend:
  #   docker:
  #     - image: 'circleci/node:13.8.0'
  #   steps:
  #     - checkout
  #     - run:
  #         name: Scan frontend
  #         command: |
  #           cd frontend
  #           npm install
  #           npm audit fix --audit-level=critical --force
  #     - slack/notify:
  #         event: fail
  #         template: basic_fail_1

  # scan-backend:
  #   docker:
  #     - image: 'circleci/node:13.8.0'
  #   steps:
  #     - checkout
  #     - run:
  #         name: Scan backend
  #         command: |
  #           cd backend
  #           npm install
  #           npm audit fix --audit-level=critical --force
  #     - slack/notify:
  #         event: fail
  #         template: basic_fail_1

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum -y install tar gzip jq npm
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags Project=udapeople \
              --stack-name "udapeople-backend-764468227672" \
              --parameter-overrides ID="764468227672"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags Project=udapeople \
              --stack-name "udapeople-frontend-764468227672" \
              --parameter-overrides ID="frontend-764468227672"

      - run:
          name: Add back-end ip to ansible inventory
          command: |
            cd ~/project/.circleci/ansible/
            SERVER_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:Project,Values=udapeople" --output text)
            echo $SERVER_IP >> inventory.txt
            cat inventory.txt
            ls -la ~/project/backend
            cp inventory.txt ~/project/backend
            ls  -la ~/project/backend

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt

  # configure-infrastructure:
  #   docker:
  #     - image: python:3.7-alpine3.11
  #   steps:
  #     - checkout
  #     - add_ssh_keys:
  #         fingerprints: ["7f:96:c6:1e:f4:36:29:65:f5:a7:01:1c:dc:b3:51:e9"]
  #     - attach_workspace:
  #         at: ~/project/
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           apk add --update tar gzip ansible nodejs npm curl
  #           pip install awscli
  #     - run:
  #         name: Configure server
  #         command: |
  #           echo NODE_ENV=production >> "backend/.env"
  #           cd ~/project/.circleci/ansible
  #           aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:project,Values=udapeople" --output text >> inventory.txt
  #           ansible-playbook -i inventory.txt configure-server.yml

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["7f:96:c6:1e:f4:36:29:65:f5:a7:01:1c:dc:b3:51:e9"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: Configure server
          command: |
            ansible-playbook .circleci/ansible/configure-server.yml -i .circleci/ansible/inventory.txt

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout:
      - run:
          name: Run migrations
          command: |
            npm run  migrations > migration_log.log
      - run:
          name: Send migration results to memstash
          command: |
            if grep -q "has been executed successfully" "migration_log.log";
            then
              curl -H "Content-Type: text/plain" -H "token: udapeople-migration_764468227672" --request PUT --data "1" https://api.memstash.io/values/migration_764468227672
            fi

workflows:
  default:
    jobs:
      # - build-frontend:
      #     context:
      #       - Slack
      # - build-backend:
      #     context:
      #       - Slack
      # - test-frontend:
      #     context:
      #       - Slack
      #     requires: [build-frontend]
      # - test-backend:
      #     context:
      #       - Slack
      #     requires: [build-backend]
      # - scan-backend:
      #     context:
      #       - Slack
      #     requires: [build-backend]
      # - scan-frontend:
      #     context:
      #       - Slack
      #     requires: [build-frontend]
      - deploy-infrastructure:
          context:
            - Slack
      - configure-infrastructure:
          context:
            - Slack
          requires: [deploy-infrastructure]
      - run-migrations
          context:
            - Slack
          requires: [configure-infrastructure]